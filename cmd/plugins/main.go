package main

import (
	"fmt"
	"os"
	"strings"
)

var (
	pluginsFolder = "plugins"
)

func main() {
	entries, errLoadDir := os.ReadDir(pluginsFolder)
	if errLoadDir != nil {
		fmt.Printf("error loading plugins folder: %s\n", errLoadDir)
		os.Exit(1)
	}

	var plugins []string

	for _, entry := range entries {
		if !entry.IsDir() {
			continue
		}
		plugins = append(plugins, entry.Name())
	}

	packageName := getPackageName()

	s := "// GENERATED BY cmd/plugins DO NOT EDIT!\n\npackage plugins\n"

	if len(plugins) > 0 {
		s += "\nimport(\n"
		for idx, name := range plugins {
			fmt.Printf("add plugin: %s\n", name)
			s += fmt.Sprintf("\tp%d \"%s/%s/%s\"\n", idx, packageName, pluginsFolder, name)
		}
		s += ")\n\nfunc init() {\n"
		for idx, name := range plugins {
			s += fmt.Sprintf("\tregisterPlugin(Plugin{Name: \"%s\", Handler: p%d.InitPlugin()})\n", name, idx)
		}
		s += "}\n"
	} else {
		fmt.Printf("no plugins found in %s\n", pluginsFolder)
	}

	fmt.Printf("generate app/plugins/plugins_gen.go\n")
	errWrite := os.WriteFile("app/plugins/plugins_gen.go", []byte(s), 0644)
	if errWrite != nil {
		fmt.Printf("error writing plugins.go: %s\n", errWrite)
		os.Exit(1)
	}
}

func getPackageName() string {
	f, err := os.ReadFile("go.mod")
	if err != nil {
		panic("error read go.mod file, " + err.Error())
	}

	lines := strings.Split(string(f), "\n")
	if len(lines) < 1 {
		panic("error read go.mod file, empty file")
	}

	pkgName := strings.TrimPrefix(lines[0], "module ")
	if pkgName == "" {
		panic("error read go.mod file, empty module name")
	}

	return pkgName
}
